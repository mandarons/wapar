name: CI - Pull Request

on:
    pull_request:
        branches: [main]
        paths:
            - 'server/**'
            - 'app/**'
            - 'Dockerfile'
            - '.github/workflows/**'
    workflow_dispatch:

jobs:
    cache-server-install:
        container:
            image: mandarons/node-lts
            options: >-
                --user=root
        runs-on: ubuntu-latest
        steps:
            - name: Checkout source code
              uses: actions/checkout@v4
            - name: Set up Node.js environment
              uses: actions/setup-node@v4
              with:
                  node-version: 20.11.0
            - name: Cache yarn dependencies
              uses: actions/cache@v4
              id: cache-dependencies
              with:
                  path: server/node_modules
                  key: ${{ runner.os }}-yarn-server-${{ hashFiles('server/yarn.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-yarn-server-
            - name: Install Dependencies
              if: steps.cache-dependencies.outputs.cache-hit != 'true'
              run: |
                  yarn install --cwd server --frozen-lockfile

    setup-bun:
        needs: cache-server-install
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
            
            - name: Setup Bun
              uses: oven-sh/setup-bun@v1
              with:
                  bun-version: '1.0.30'

    cache-app-install:
        needs: setup-bun
        runs-on: ubuntu-latest
        steps:
            - name: Checkout source code
              uses: actions/checkout@v4
              
            - name: Setup Bun
              uses: oven-sh/setup-bun@v1
              with:
                  bun-version: '1.0.30'
            
            - name: Get Bun version
              run: bun --version
            
            - name: Cache Bun modules
              uses: actions/cache@v4
              id: cache-bun
              with:
                  path: |
                      ~/.bun/install/cache
                      app/node_modules
                  key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
                  restore-keys: |
                      ${{ runner.os }}-bun-
            
            - name: Install dependencies
              if: steps.cache-bun.outputs.cache-hit != 'true'
              working-directory: app
              run: |
                  bun install --frozen-lockfile
            
            - name: Build app
              working-directory: app
              run: bun run build

    test:
        container:
            image: mandarons/node-lts
            options: >-
                --user=root
        services:
            postgres:
                image: postgres:15-alpine
                env:
                    POSTGRES_DB: wapardev
                    POSTGRES_USER: waparuser
                    POSTGRES_PASSWORD: wapar-user
                    POSTGRES_HOST_AUTH_METHOD: trust
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
        needs: cache-server-install
        runs-on: ubuntu-latest
        steps:
            - name: Checkout source code
              uses: actions/checkout@v4
            - name: Setup Node.js environment
              uses: actions/setup-node@v4
              with:
                  node-version: 20.11.0
            - name: Restore yarn-server depdendencies
              uses: actions/cache@v4
              with:
                  path: server/node_modules
                  key: ${{ runner.os }}-yarn-server-${{ hashFiles('server/yarn.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-yarn-server-
            - name: initialize DB
              run: |
                  PGPASSWORD=wapar-user psql -h "postgres" -U waparuser -d wapardev -c "CREATE EXTENSION IF NOT EXISTS pgcrypto" && 
                  PGPASSWORD=wapar-user psql -h "postgres" -U waparuser -d wapardev -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\""
            - name: Run server Tests
              run: |
                  yarn --cwd server test:ci

    test-app:
        needs: cache-app-install
        runs-on: ubuntu-latest
        steps:
            - name: Checkout source code
              uses: actions/checkout@v4
              
            - name: Setup Bun
              uses: oven-sh/setup-bun@v1
              with:
                  bun-version: '1.0.30'
            
            - name: Cache Bun modules
              uses: actions/cache@v4
              id: cache-bun
              with:
                  path: |
                      ~/.bun/install/cache
                      app/node_modules
                  key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
                  restore-keys: |
                      ${{ runner.os }}-bun-
            
            - name: Run tests
              working-directory: app
              run: |
                bun test
                bun run test:e2e
