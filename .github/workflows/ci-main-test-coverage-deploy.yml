name: CI - Main

on:
    push:
        branches: [main]
        paths:
            - 'app/**'
            - 'server/**'
            - '.github/workflows/**'
    workflow_dispatch:
jobs:
    cache-server-install:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout source code
              uses: actions/checkout@v4
            - name: Setup Bun
              uses: oven-sh/setup-bun@v2
              with:
                  bun-version: latest
            - name: Cache bun dependencies
              uses: actions/cache@v4
              id: cache-dependencies
              with:
                  path: server/node_modules
                  key: ${{ runner.os }}-bun-server-${{ hashFiles('server/bun.lockb') }}
                  restore-keys: |
                      ${{ runner.os }}-bun-server-
            - name: Install Dependencies
              if: steps.cache-dependencies.outputs.cache-hit != 'true'
              run: |
                  cd server && bun install --frozen-lockfile

    cache-app-install:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout source code
              uses: actions/checkout@v4
            - name: Setup Bun
              uses: oven-sh/setup-bun@v2
              with:
                  bun-version: latest
            - name: Cache bun dependencies
              uses: actions/cache@v4
              id: cache-dependencies
              with:
                  path: app/node_modules
                  key: ${{ runner.os }}-bun-app-${{ hashFiles('app/bun.lockb') }}
                  restore-keys: |
                      ${{ runner.os }}-bun-app-
            - name: Install Dependencies
              if: steps.cache-dependencies.outputs.cache-hit != 'true'
              run: |
                  cd app && bun install --frozen-lockfile

    build:
        needs: [cache-app-install, test-server]
        runs-on: ubuntu-latest
        steps:
            - name: Check Out Repo
              uses: actions/checkout@v4
            - name: Setup Bun
              uses: oven-sh/setup-bun@v2
              with:
                  bun-version: latest
            - name: Restore bun-app dependencies
              uses: actions/cache@v4
              with:
                  path: app/node_modules
                  key: ${{ runner.os }}-bun-app-${{ hashFiles('app/bun.lockb') }}
                  restore-keys: |
                      ${{ runner.os }}-bun-app-
            - name: Build
              run: |
                  cd app && bun run build
              env:
                  PUBLIC_URL: '.'
            # - name: Upload build artifacts
            #   uses: actions/upload-artifact@v3
            #   with:
            #     name: build-output
            #     path: build
            #     retention-days: 1

    test-server:
        needs: cache-server-install
        runs-on: ubuntu-latest
        steps:
            - name: Checkout source code
              uses: actions/checkout@v4
            - name: Setup Bun
              uses: oven-sh/setup-bun@v2
              with:
                  bun-version: latest
            - name: Restore bun-server dependencies
              uses: actions/cache@v4
              with:
                  path: server/node_modules
                  key: ${{ runner.os }}-bun-server-${{ hashFiles('server/bun.lockb') }}
                  restore-keys: |
                      ${{ runner.os }}-bun-server-
            - name: Generate Drizzle migrations
              run: |
                  cd server && bun run db:generate
            - name: Run server Tests
              run: |
                  cd server && bun run test --run
            # - name: Upload coverage artifacts
            #   uses: actions/upload-artifact@v3
            #   with:
            #     name: coverage-output
            #     path: coverage
            #     retention-days: 1
            # - name: Checkout gh-pages
            #   uses: actions/checkout@v4
            #   if: always()
            #   continue-on-error: true
            #   with:
            #     ref: gh-pages
            #     path: gh-pages
            # - name: Generate Allure Test Report
            #   uses: simple-elf/allure-report-action@master
            #   if: always()
            #   with:
            #     allure_results: allure-results
            #     subfolder: test-results
            #     allure_report: allure-report
            #     allure_history: allure-history
            #     keep_reports: 100
            # - name: Generate badges
            #   run: |
            #     node generate-badges.js
            # - name: Upload test artifacts
            #   uses: actions/upload-artifact@v3
            #   with:
            #     name: test-output
            #     path: allure-history/test-results/
            #     retention-days: 1
            # - name: Upload badges artifacts
            #   uses: actions/upload-artifact@v3
            #   with:
            #     name: badges-output
            #     path: badges
            #     retention-days: 1

    # publish-test-report:
    #   needs: test
    #   runs-on: ubuntu-latest
    #   steps:
    #     - name: Download test artifacts
    #       uses: actions/download-artifact@v3
    #       with:
    #         name: test-output
    #         path: allure-history
    #     - name: Checkout gh-pages
    #       uses: actions/checkout@v4
    #       if: always()
    #       continue-on-error: true
    #       with:
    #         ref: gh-pages
    #         path: gh-pages
    #     - name: Publish test report to gh-pages
    #       if: always()
    #       uses: peaceiris/actions-gh-pages@v3
    #       with:
    #         deploy_key: ${{ secrets.DEPLOY_PRIVATE_KEY }}
    #         publish_branch: gh-pages
    #         publish_dir: allure-history
    #         destination_dir: test-results

    # publish-coverage-report:
    #   needs: publish-test-report
    #   runs-on: ubuntu-latest
    #   steps:
    #     - name: Download coverage artifacts
    #       uses: actions/download-artifact@v3
    #       with:
    #         name: coverage-output
    #         path: coverage
    #     - name: Checkout gh-pages
    #       uses: actions/checkout@v4
    #       if: always()
    #       continue-on-error: true
    #       with:
    #         ref: gh-pages
    #         path: gh-pages
    #     - name: Publish test coverage to gh-pages
    #       if: always()
    #       uses: peaceiris/actions-gh-pages@v3
    #       with:
    #         deploy_key: ${{ secrets.DEPLOY_PRIVATE_KEY }}
    #         publish_branch: gh-pages
    #         publish_dir: coverage
    #         destination_dir: test-coverage

    # publish-badges:
    #   needs: publish-coverage-report
    #   runs-on: ubuntu-latest
    #   steps:
    #     - name: Download badges artifacts
    #       uses: actions/download-artifact@v3
    #       with:
    #         name: badges-output
    #         path: badges
    #     - name: Checkout gh-pages
    #       uses: actions/checkout@v4
    #       if: always()
    #       continue-on-error: true
    #       with:
    #         ref: gh-pages
    #         path: gh-pages
    #     - name: Publish badges to gh-pages
    #       if: always()
    #       uses: peaceiris/actions-gh-pages@v3
    #       with:
    #         deploy_key: ${{ secrets.DEPLOY_PRIVATE_KEY }}
    #         publish_branch: gh-pages
    #         publish_dir: badges
    #         destination_dir: badges

    # e2e:
    #   needs: [ build, test ]
    #   runs-on: ubuntu-latest
    #   steps:
    #     - name: Checkout source code
    #       uses: actions/checkout@v4
    #     - name: Setup Node.js environment
    #       uses: actions/setup-node@v4
    #       with:
    #         node-version: 20.11.0
    #     - name: Restore yarn-server depdendencies
    #       uses: actions/cache@v4
    #       with:
    #         path: node_modules
    #         key: ${{ runner.os }}-yarn-server-${{ hashFiles('yarn.lock') }}
    #         restore-keys: |
    #           ${{ runner.os }}-yarn-server-
    #     - name: Restore Cypress binary
    #       id: cache-cypress-binary
    #       uses: actions/cache@v4
    #       with:
    #         path: ~/.cache/Cypress
    #         key: cypress-binary-${{ hashFiles('yarn.lock') }}
    #         restore-keys: |
    #           cypress-binary-
    #     - name: Download build artifacts
    #       uses: actions/download-artifact@v3
    #       with:
    #         name: build-output
    #         path: build
    #     - name: Run cypress
    #       uses: cypress-io/github-action@v2.10.1
    #       with:
    #         start: yarn prod:local & wait-on http://localhost:3334/
    #         browser: chrome
    #         headless: true
    #         install: false

    # deploy:
    #   needs: e2e
    #   runs-on: ubuntu-latest
    #   steps:
    #     - name: Check Out Repo
    #       uses: actions/checkout@v4
    #     - name: Download build artifacts
    #       uses: actions/download-artifact@v3
    #       with:
    #         name: build-output
    #         path: build
    #     - name: Cache Docker layers
    #       uses: actions/cache@v4
    #       with:
    #         path: /tmp/.buildx-cache
    #         key: ${{ runner.os }}-buildx-${{ github.sha }}
    #         restore-keys: |
    #           ${{ runner.os }}-buildx-
    #     - name: Log into Docker Hub
    #       uses: docker/login-action@v1
    #       with:
    #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
    #         password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    #     - name: Set up Docker QEMU
    #       uses: docker/setup-qemu-action@v1
    #     - name: Set up Docker Buildx
    #       id: buildx
    #       uses: docker/setup-buildx-action@v1
    #     - name: Build and push the image
    #       id: docker_build
    #       uses: docker/build-push-action@v2
    #       with:
    #         context: ./
    #         file: ./Dockerfile
    #         push: true
    #         platforms: linux/arm64, linux/amd64, linux/arm/v7
    #         tags: mandarons/yadd:main
    #     - name: Image digest
    #       run: echo ${{ steps.docker_build.outputs.digest }}
