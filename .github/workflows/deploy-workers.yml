name: Deploy Workers

on:
  # Deploy to production on push to main
  push:
    branches: [main]
    paths:
      - 'server/**'
      - '.github/workflows/deploy-workers.yml'
  
  # Deploy to staging on pull requests
  pull_request:
    branches: [main]
    paths:
      - 'server/**'
      - '.github/workflows/deploy-workers.yml'
  
  # Allow manual deployment
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - production
          - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
      pull-requests: write
    
    defaults:
      run:
        working-directory: server
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile || bun install

      - name: Generate Drizzle migrations
        run: bun run db:generate

      - name: Run tests
        run: bun run test --run

      # Determine environment based on event type
      - name: Set environment
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "deployment-name=Staging (PR #${{ github.event.pull_request.number }})" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
            echo "deployment-name=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "deployment-name=Production" >> $GITHUB_OUTPUT
          fi

      # Deploy schema to D1 database
      - name: Deploy database schema (production)
        if: steps.set-env.outputs.environment == 'production'
        run: bun run db:deploy:remote
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}

      - name: Deploy database schema (staging)
        if: steps.set-env.outputs.environment == 'staging'
        run: |
          # Deploy schema to staging D1 database
          bunx wrangler d1 execute wapar-db-staging --remote --file=./schema.sql
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}

      # Deploy Workers
      - name: Deploy to Cloudflare Workers (production)
        if: steps.set-env.outputs.environment == 'production'
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          command: deploy
          workingDirectory: server

      - name: Deploy to Cloudflare Workers (staging)
        if: steps.set-env.outputs.environment == 'staging'
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          command: deploy --env staging
          workingDirectory: server
      # Comment on PR with deployment info
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = 'https://wapar-api-staging.${{ secrets.CF_SUBDOMAIN }}.workers.dev';
            const comment = `## ðŸš€ Staging Deployment
            
            Your changes have been deployed to the staging environment!
            
            **Worker URL:** ${deploymentUrl}
            
            **Environment:** Staging
            **Database:** wapar-db-staging
            
            This deployment will be automatically updated with new commits to this PR.`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('ðŸš€ Staging Deployment')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
